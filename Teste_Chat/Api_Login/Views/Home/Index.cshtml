@using Microsoft.AspNetCore.Identity


@{
    ViewData["Title"] = "Home Page";
    ViewData["NomeUsuario"] = User.Identity?.Name!;
}


<!DOCTYPE html>
<html>
<head>
    <title>Private Chat with Notifications</title>
</head>
<body>
    <div id="teste" style="margin-left:200px;">
    <input type="text" id="roomInput" placeholder="Digite o nome da sala" />
 @*    <input type="text" id="userInput" placeholder="Enter your name" /> *@
    <input type="text" id="messageInput" style="border-radius:15px;padding:15px;border-style:solid;border-color:grey; width:400px;" placeholder="Digite a mensagem" />
        <button onclick="joinRoom()">Entrar na sala</button>
        <button onclick="sendMessage()" style="border-radius:10px;">Enviar</button>
    
    </div>
    <ul id="messagesList"></ul>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            if (Notification.permission !== "granted") {
                Notification.requestPermission();
            }
        });

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        var nomeUsuario = '@ViewData["NomeUsuario"]';

        connection.on("ReceiveMessage", (user, message) => {
            const li = document.createElement("li");
            const spanNomeUsuario = document.createElement("span");
            const spanMensagem = document.createElement("span");
            const dataHora = new Date();
            const horas = dataHora.getHours();
            const minutos = dataHora.getMinutes();
            const minutosAjustados = minutos < 10 ? '0' + minutos.toString() : minutos

            console.log(user, "usuario") //

            li.className = 'mt-3 d-flex flex-column align-items-end';
            spanNomeUsuario.textContent = `Eu, ${horas}:${minutosAjustados}`;
            spanNomeUsuario.style.textAlign = 'right';
            spanMensagem.textContent = ` ${message}`;
            li.style.textAlign = 'right';
            li.style.alignContent = 'right';
            spanMensagem.className = 'd-block';
            spanMensagem.style.borderRadius = '15px';
            spanMensagem.style.padding = '15px';
            spanMensagem.style.marginTop = '5px';
            spanMensagem.style.backgroundColor = 'grey';
            spanNomeUsuario.className = 'd-block';

            if (user != nomeUsuario) {
                li.className = 'mt-3 d-flex flex-column align-items-start';
                spanNomeUsuario.textContent = `${user}, ${horas}:${minutosAjustados}`;
                spanNomeUsuario.style.textAlign = 'left';
                spanMensagem.textContent = ` ${message}`;
                spanMensagem.className = 'd-block';
                spanNomeUsuario.className = 'd-block';
                li.style.textAlign = 'left';
                li.style.alignContent = 'left';
                spanMensagem.style.backgroundColor = 'green';
                spanMensagem.style.padding = '15px';
                spanMensagem.style.marginTop = '5px';
            }

            li.appendChild(spanNomeUsuario);
            li.appendChild(spanMensagem);
            document.getElementById("messagesList").appendChild(li);
                       
            // Enviar notificação
           if (!document.hasFocus()) {
                sendNotification(user, message);
           }
        });

        function sendNotification(user, message) {
            if (Notification.permission === "granted") {
                const notification = new Notification("Nova mensagem de " + user, {
                    body: message,
                    icon: "https://via.placeholder.com/128" // Ícone customizado opcional
                });

                notification.onclick = () => {
                    window.focus(); // Foca na janela se o usuário clicar na notificação
                };
            }
        }

        connection.start().catch(err => console.error(err.toString()));

        let roomName = "";

        function joinRoom() {
            roomName = document.getElementById("roomInput").value;
            //roomName = "teste"; //Luciano
            connection.invoke("JoinRoom", roomName).catch(err => console.error(err.toString()));
        }

        function sendMessage() {
            //const user = document.getElementById("userInput").value;
            const message = document.getElementById("messageInput").value;
            connection.invoke("SendMessageToRoom", roomName, nomeUsuario, message).catch(err => console.error(err.toString()));
            document.getElementById("messageInput").value = '';
        }
    </script>
</body>
</html>
